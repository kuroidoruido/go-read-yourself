---
import { Icon } from "astro-icon/components";
import { TagFormField } from "./tag/TagFormField.react";
import { TagsService } from "../services/tags.service";

interface Props {
  post?: NewsEntry;
}

const { post } = Astro.props;
---

<form method="POST">
  <input type="hidden" name="id" value={post?.id} />
  <input type="hidden" name="creationDate" value={post?.creationDate} />
  <input type="hidden" name="updateDates" value={post?.updateDates ?? ""} />
  <div class="field">
    <input
      type="text"
      name="url"
      placeholder="Source"
      required
      value={post?.url}
    />
    <div class="actions">
      <button type="button" title="Retry grab metadata" id="retry-grab-metadata"
        ><Icon name="lucide:refresh-cw" aria-hidden="true" /></button
      >
    </div>
  </div>
  <div class="field">
    <select id="title-candidates" aria-label="Title candidates"></select>
  </div>
  <div class="field">
    <input
      type="text"
      name="title"
      placeholder="Title"
      required
      value={post?.title}
    />
  </div>

  <div class="field">
    <textarea name="content" placeholder="Content" required
      >{post?.content ?? ""}</textarea
    >
  </div>
  <TagFormField
    knownTags={TagsService.getTags()}
    tagsAssociations={TagsService.getTagsAssociations()}
    initialValue={post?.tags}
    client:load
  />
  <button class="btn">Publish</button>
  <br />
  <br />
  <br />
  <button class="btn secondary" type="reset">Reset</button>
</form>

<style>
  form {
    width: 100%;
    background-color: var(--card--background-color);
    box-shadow: 1px 1px 15px var(--border-shadow);
    padding: 32px;
    box-sizing: border-box;
  }
  svg[data-icon] {
    height: 1.5rem;
    width: 1.5rem;
  }
</style>

<script>
  const urlField = document.querySelector<HTMLInputElement>(
    'form .field input[name="url"]'
  );
  const retryGrabMetadataButton = document.querySelector<HTMLButtonElement>(
    "#retry-grab-metadata"
  );
  const titleField = document.querySelector<HTMLInputElement>(
    'form .field input[name="title"]'
  );
  const titleCandidatesSelect =
    document.querySelector<HTMLSelectElement>("#title-candidates");
  urlField?.addEventListener("change", cleanupLink(grabMetadata));
  retryGrabMetadataButton?.addEventListener("click", grabMetadata);

  function cleanupLink(next: VoidFunction) {
    return () => {
      const url = urlField?.value;
      // cleanup youtube links
      if (url?.includes("youtu.be")) {
        urlField!.value = url.split("?")[0] ?? "";
      }
      return next();
    };
  }

  async function grabMetadata() {
    const url = urlField?.value;
    if (url && url.length > 0) {
      const res: { titles: string[] } = await fetch(
        `/grab-metadata?url=${encodeURI(url)}`
      ).then((res) => res.json());
      console.log({ res });
      titleCandidatesSelect!.innerHTML =
        "<option></option>" +
        res.titles
          .map(
            (opt) =>
              `<option value="${btoa(
                opt.replaceAll(/[^\w\s]/g, "_")
              )}">${opt}</option>`
          )
          .join("");
    }
  }

  titleCandidatesSelect?.addEventListener("change", () => {
    const selectedOption = titleCandidatesSelect.querySelector(
      `option[value="${titleCandidatesSelect.value}"]`
    );
    titleField!.value =
      selectedOption?.textContent ?? atob(titleCandidatesSelect.value);
  });
</script>
