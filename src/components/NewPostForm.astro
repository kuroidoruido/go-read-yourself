---
import { refreshCw as refreshCwIcon } from "lucide-static/lib";
import TagFormField from "./TagFormField.astro";
---

<form method="POST">
  <div class="field">
    <input type="text" name="url" placeholder="Source" required />
    <div class="actions">
      <button
        type="button"
        title="Retry grab metadata"
        id="retry-grab-metadata"
        set:html={refreshCwIcon}
      />
    </div>
  </div>
  <div class="field">
    <select id="title-candidates" aria-label="Title candidates"></select>
  </div>
  <div class="field">
    <input type="text" name="title" placeholder="Title" required />
  </div>

  <div class="field">
    <textarea name="content" placeholder="Content" required></textarea>
  </div>
  <TagFormField />
  <button class="btn">Publish</button>
  <br />
  <br />
  <br />
  <button class="btn secondary" type="reset">Reset</button>
</form>

<style>
  form {
    max-width: 600px;
    margin: 32px auto;
    background-color: var(--card--background-color);
    box-shadow: 1px 1px 15px var(--border-shadow);
    padding: 32px;
  }
</style>

<script>
  const urlField = document.querySelector<HTMLInputElement>(
    'form .field input[name="url"]'
  );
  const retryGrabMetadataButton = document.querySelector<HTMLButtonElement>(
    "#retry-grab-metadata"
  );
  const titleField = document.querySelector<HTMLInputElement>(
    'form .field input[name="title"]'
  );
  const titleCandidatesSelect =
    document.querySelector<HTMLSelectElement>("#title-candidates");
  urlField?.addEventListener("change", cleanupLink(grabMetadata));
  retryGrabMetadataButton?.addEventListener("click", grabMetadata);

  function cleanupLink(next: VoidFunction) {
    return () => {
      const url = urlField?.value;
      // cleanup youtube links
      if (url?.includes("youtu.be")) {
        urlField!.value = url.split("?")[0] ?? "";
      }
      return next();
    };
  }

  async function grabMetadata() {
    const url = urlField?.value;
    if (url && url.length > 0) {
      const res: { titles: string[] } = await fetch(
        `/grab-metadata?url=${encodeURI(url)}`
      ).then((res) => res.json());
      console.log({ res });
      titleCandidatesSelect!.innerHTML =
        "<option></option>" +
        res.titles
          .map(
            (opt) =>
              `<option value="${btoa(
                opt.replaceAll(/[^\w\s]/g, "_")
              )}">${opt}</option>`
          )
          .join("");
    }
  }

  titleCandidatesSelect?.addEventListener("change", () => {
    const selectedOption = titleCandidatesSelect.querySelector(
      `option[value="${titleCandidatesSelect.value}"]`
    );
    titleField!.value =
      selectedOption?.textContent ?? atob(titleCandidatesSelect.value);
  });
</script>
