---
import { format, parseISO } from "date-fns";
import { marked } from "marked";
import { Tag } from "./Tag.react";
import { TagContainer } from "./TagContainer.react";
import { ConfigService } from "../services/config.service";
import { tryGetYoutubeThumbnail } from "../utils/post.util";

export interface Props {
  news: NewsEntry;
}

const { news } = Astro.props as Props;
const formattedCreationDate = format(
  parseISO(news.creationDate),
  ConfigService.getConfig().card.dateFormat
);

const youtubeThumbnail = tryGetYoutubeThumbnail(news.url);
const videoPreview = youtubeThumbnail
  ? `[![${news.url}](${youtubeThumbnail} "Youtube video preview")](${news.url})\n\n`
  : "";
---

<div class="card" data-news-id={news.id} data-testid="news-card">
  <div class="card-title">
    <a href={news.url}>{news.title}</a>
  </div>
  <TagContainer class={["card-tags"]}>
    {news.tags.map((tag) => <Tag>{tag}</Tag>)}
  </TagContainer>
  <div
    class="card-content"
    set:html={marked.parse(videoPreview + news.content)}
  />
  <div class="card-date">{formattedCreationDate}</div>
</div>

<style>
  .card {
    display: flex;
    flex-direction: column;
    gap: 16px;
    box-shadow: 1px 1px 15px var(--border-shadow);
    padding: 16px;
    background-color: var(--card--background-color);

    .card-content {
      blockquote {
        margin: 8px 16px;
        padding: 0 16px;
        border-left: 4px solid var(--card--blockquote-border);
      }
      pre {
        overflow-x: auto;
        padding: 1rem;
        background-color: var(--color--black);
      }
      p:has(img[title="Youtube video preview"]:first-child:last-child),
      p:has(iframe:first-child:last-child) {
        display: flex;
        justify-content: center;
        img {
          max-width: min(100%, 40rem);
        }
      }
    }

    .card-date {
      text-align: end;
    }
  }
</style>

<script>
  import { extractYoutubeVideoId } from "../utils/post.util";

  const videoPreviews = document.querySelectorAll<HTMLImageElement>(
    'img[title="Youtube video preview"]'
  );
  for (const videoPreview of videoPreviews) {
    videoPreview.addEventListener("click", (e) => {
      e.preventDefault();
      e.stopPropagation();
      const embed = document.createElement("iframe");
      const videoId = extractYoutubeVideoId(videoPreview.alt);
      Object.assign(embed, {
        width: "560px",
        height: "315px",
        src: `https://youtube.com/embed/${videoId}`,
        title: "YouTube video player",
        frameborder: 0,
        allow:
          "accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share",
        referrerpolicy: "strict-origin-when-cross-origin",
        allowfullscreen: "true",
      });
      videoPreview.parentElement?.replaceWith(embed);
    });
  }
</script>
