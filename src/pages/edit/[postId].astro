---
import { formatISO } from "date-fns";
import Layout from "../../layouts/Layout.astro";
import NewPostForm from "../../components/NewPostForm.astro";
import { UserService } from "../../services/user.service";
import { NewsService } from "../../services/news.service";
import {
  isDefined,
  isDefinedAndNotEmpty,
  isNotDefinedOrEmpty,
} from "../../utils/fp.util";
import Message, { MessageType } from "../../components/Message.astro";

const isAdmin = UserService.isConnectedAsAdmin(
  (name) => Astro.cookies.get(name)?.value
);

if (!isAdmin) {
  return Astro.redirect("/");
}

const { postId } = Astro.params;

if (!postId) {
  return Astro.redirect("/");
}

let message:
  | { type?: MessageType; title: string; message?: string }
  | undefined;

if (Astro.request.method === "POST") {
  try {
    const data = await Astro.request.formData();
    const id = data.get("id") as string;
    const url = data.get("url") as string;
    const title = data.get("title") as string;
    const content = data.get("content") as string;
    const tags = data.get("tags") as string;
    const creationDate = data.get("creationDate") as string;
    const updateDates = data.get("updateDates") as string;
    if (isNotDefinedOrEmpty(id)) {
      Astro.response.status = 400;
      message = {
        type: "error",
        title: "Cannot save...",
        message: "id is missing",
      };
    } else if (isNotDefinedOrEmpty(url)) {
      Astro.response.status = 400;
      message = {
        type: "error",
        title: "Cannot save...",
        message: "URL is missing",
      };
    } else if (isNotDefinedOrEmpty(content)) {
      Astro.response.status = 400;
      message = {
        type: "error",
        title: "Cannot save...",
        message: "Content is missing",
      };
    } else {
      NewsService.editPost({
        id,
        url,
        content,
        title,
        tags: tags
          .split(",")
          .map((t) => t.trim())
          .filter(isDefinedAndNotEmpty),
        creationDate,
        updateDates: [
          ...(updateDates ?? "")
            .split(",")
            .map((date) => date.trim())
            .filter(isDefinedAndNotEmpty),
          formatISO(new Date()),
        ],
      });
      message = {
        type: "success",
        title: "Save!",
        message: "Post successfully updated",
      };
    }
  } catch (error) {
    if (error instanceof Error) {
      console.error(error.message);
    }
  }
}

const post = NewsService.getNewsPost(postId);
---

<Layout noFAB>
  {
    isDefined(message) && (
      <Message
        style="max-width: 600px;margin: 2rem auto"
        type={message.type}
        title={message.title}
        message={message.message}
      />
    )
  }
  <NewPostForm post={post} />
</Layout>
