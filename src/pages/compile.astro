---
import { Icon } from "astro-icon/components";
import Layout from "../layouts/Layout.astro";
import { NewsService } from "../services/news.service";
import { UserService } from "../services/user.service";
import { compilePostsAsFormattedMarkdown } from "../utils/compile.util";
import { ConfigService } from "../services/config.service";
import { checkLinks, renderPreview } from "../utils/preview.util";

const isAdmin = UserService.isConnectedAsAdmin(
  (name) => Astro.cookies.get(name)?.value
);

if (!isAdmin) {
  return Astro.redirect("/");
}

if (Astro.url.searchParams.has("markAsCompiled")) {
  const postToMarkAsCompiled = Astro.url.searchParams
    .get("markAsCompiled")!
    .split(",");
  console.log("Mark as compiled", postToMarkAsCompiled);
  NewsService.markPostsAsCompiled(postToMarkAsCompiled);
}

const postsToCompile = NewsService.getPostsToCompile();
const postIdsToCompile = postsToCompile.map((post) => post.id);
const mardownFile = compilePostsAsFormattedMarkdown(
  postsToCompile,
  ConfigService.getConfig().compile
);
const linksStatus = await checkLinks(postsToCompile.map((post) => post.url));
const allLinksOk = linksStatus.every(({ status }) => status === "ok");
---

<Layout noFAB>
  <div class="actions">
    <button class="btn" id="copy-btn">
      <Icon name="lucide:copy" aria-hidden="true" />
      <span>Copy</span>
    </button>
    <a
      class="btn"
      role="button"
      id="mark-compiled-btn"
      href={`/compile?markAsCompiled=${postIdsToCompile.join(",")}`}
    >
      <Icon name="lucide:list-checks" aria-hidden="true" />
      <span>Mark as compiled</span>
    </a>
    <div class:list={["links-status", allLinksOk ? "links-ok" : "links-ko"]}>
      {allLinksOk ? "All links are ok" : "Some links are invalids!"}
    </div>
  </div>
  <section class="text-and-preview">
    <textarea set:html={mardownFile} id="compiled-textarea" />
    <article class="preview">
      <main set:html={renderPreview(mardownFile, linksStatus)} />
    </article>
  </section>
</Layout>

<style>
  .actions {
    width: 90vw;
    margin: 2rem auto;
    display: flex;
    gap: 8px;
    align-items: center;

    .links-status {
      &.links-ok {
        color: green;
      }
      &.links-ko {
        color: red;
      }
    }
  }
  .text-and-preview {
    width: 90vw;
    min-height: 80vh;
    margin: 2rem auto;
    display: grid;
    grid-template-columns: 50% 50%;
    grid-template-rows: 1fr;

    textarea {
      display: block;
    }
    article {
      padding: 1rem;

      main {
        blockquote {
          border-left: 4px solid var(--color--primary-dark);
          margin-left: 1rem;
          padding-left: 1rem;
        }
        pre {
          width: 100%;
          overflow-x: auto;
          padding: 1rem;
          background-color: var(--color--black);
        }
        a.link-ok {
          &&::before {
            content: "✅ ";
          }
        }
        a.link-ko {
          &&::before {
            content: "❌ ";
          }
        }

        img {
          max-width: 100%;
          padding: 1rem 2rem;
        }
      }
    }
  }
  svg[data-icon] {
    height: 1.5rem;
    width: 1.5rem;
  }

  @media (width < 700px) {
    .text-and-preview {
      grid-template-columns: 1fr;
      grid-template-rows: 1fr 1fr;
    }
  }
</style>

<script>
  document
    .querySelector<HTMLButtonElement>("#copy-btn")
    ?.addEventListener("click", () => {
      const textarea =
        document.querySelector<HTMLTextAreaElement>("#compiled-textarea");
      if (textarea && textarea.textContent) {
        navigator.clipboard.writeText(textarea.textContent);
      }
    });
</script>
