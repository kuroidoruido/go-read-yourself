---
import { formatISO } from "date-fns";
import ShortUniqueId from "short-unique-id";
import Layout from "../layouts/Layout.astro";
import NewPostForm from "../components/NewPostForm.astro";
import { UserService } from "../services/user.service";
import { NewsService } from "../services/news.service";
import {
  isDefined,
  isDefinedAndNotEmpty,
  isNotDefinedOrEmpty,
} from "../utils/fp.util";
import Message, { type MessageType } from "../components/Message.astro";
import { PostPreview } from "../components/PostPreview.react";

const isAdmin = UserService.isConnectedAsAdmin(
  (name) => Astro.cookies.get(name)?.value
);

if (!isAdmin) {
  return Astro.redirect("/");
}

let message:
  | { type?: MessageType; title: string; message?: string }
  | undefined;

if (Astro.request.method === "POST") {
  try {
    const data = await Astro.request.formData();
    const url = data.get("url") as string;
    const title = data.get("title") as string;
    const content = data.get("content") as string;
    const tags = data.get("tags") as string;
    const uid = new ShortUniqueId({ length: 10 });
    if (isNotDefinedOrEmpty(url)) {
      Astro.response.status = 400;
      message = {
        type: "error",
        title: "Cannot save...",
        message: "URL is missing",
      };
    } else if (isNotDefinedOrEmpty(content)) {
      Astro.response.status = 400;
      message = {
        type: "error",
        title: "Cannot save...",
        message: "Content is missing",
      };
    } else {
      NewsService.addPost({
        id: uid.rnd(),
        url,
        content,
        title,
        tags: tags
          .split(",")
          .map((t) => t.trim())
          .filter(isDefinedAndNotEmpty),
        creationDate: formatISO(new Date()),
      });
    }
    message = {
      type: "success",
      title: "Save!",
      message: "Post successfully updated",
    };
  } catch (error) {
    if (error instanceof Error) {
      console.error(error.message);
    }
  }
}
---

<Layout noFAB>
  {
    isDefined(message) && (
      <Message
        style="max-width: 600px;margin: 2rem auto"
        type={message.type}
        title={message.title}
        message={message.message}
      />
    )
  }
  <section role="tablist">
    <input
      name="tab--add-post"
      type="radio"
      value="edit"
      id="tab--add-post--edit"
      checked
    />
    <label for="tab--add-post--edit" role="tab">Edit</label>
    <input
      name="tab--add-post"
      type="radio"
      value="preview"
      id="tab--add-post--preview"
    />
    <label for="tab--add-post--preview" role="tab">Preview</label>
    <div role="tabpanel">
      <NewPostForm />
    </div>
    <div role="tabpanel">
      <PostPreview formSelector="form" client:only />
    </div>
  </section>
</Layout>

<style>
  section[role="tablist"] {
    margin: 32px auto;
    max-width: 600px;
  }
</style>
